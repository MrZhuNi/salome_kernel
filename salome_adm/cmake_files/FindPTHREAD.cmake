# Copyright (C) 2007-2012  CEA/DEN, EDF R&D, OPEN CASCADE
#
# Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
# CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
#

# ------

MESSAGE(STATUS "Check for pthreads ...")

# ------

IF(PTHREAD_IS_MANDATORY STREQUAL 0)
  SET(PTHREAD_IS_MANDATORY 0)
  SET(PTHREAD_IS_OPTIONAL 1)
ENDIF(PTHREAD_IS_MANDATORY STREQUAL 0)
IF(PTHREAD_IS_OPTIONAL STREQUAL 0)
  SET(PTHREAD_IS_MANDATORY 1)
  SET(PTHREAD_IS_OPTIONAL 0)
ENDIF(PTHREAD_IS_OPTIONAL STREQUAL 0)
IF(NOT PTHREAD_IS_MANDATORY AND NOT PTHREAD_IS_OPTIONAL)
  SET(PTHREAD_IS_MANDATORY 1)
  SET(PTHREAD_IS_OPTIONAL 0)
ENDIF(NOT PTHREAD_IS_MANDATORY AND NOT PTHREAD_IS_OPTIONAL)

# ------

SET(PTHREAD_STATUS 1)
IF(WITHOUT_PTHREAD OR WITH_PTHREAD STREQUAL 0)
  SET(PTHREAD_STATUS 0)
  MESSAGE(STATUS "pthreads disabled from command line.")
ENDIF(WITHOUT_PTHREAD OR WITH_PTHREAD STREQUAL 0)

# ------

IF(PTHREAD_STATUS)
  IF(WITH_PTHREAD)
    SET(PTHREAD_ROOT_USER ${WITH_PTHREAD})
  ELSE(WITH_PTHREAD)
    SET(PTHREAD_ROOT_USER $ENV{PTHREADS_ROOT})
  ENDIF(WITH_PTHREAD)
ENDIF(PTHREAD_STATUS)

# -----

IF(PTHREAD_STATUS)
  IF(PTHREAD_ROOT_USER)
    SET(PTHREAD_FIND_PATHS_OPTION NO_DEFAULT_PATH)
  ELSE(PTHREAD_ROOT_USER)
    SET(PTHREAD_FIND_PATHS_OPTION)
  ENDIF(PTHREAD_ROOT_USER)
ENDIF(PTHREAD_STATUS)

# -----

IF(PTHREAD_STATUS)
  IF(PTHREAD_ROOT_USER)
    SET(PTHREAD_INCLUDE_PATHS ${PTHREAD_ROOT_USER}/include)
  ELSE(PTHREAD_ROOT_USER)
    SET(PTHREAD_INCLUDE_PATHS)
  ENDIF(PTHREAD_ROOT_USER)
  SET(PTHREAD_INCLUDE_TO_FIND pthread.h)
  FIND_PATH(PTHREAD_INCLUDE_DIR ${PTHREAD_INCLUDE_TO_FIND} PATHS ${PTHREAD_INCLUDE_PATHS} ${PTHREAD_FIND_PATHS_OPTION})
  IF(PTHREAD_INCLUDE_DIR)
    IF(PTHREAD_ROOT_USER)
      SET(PTHREAD_INCLUDE_DIRS ${PTHREAD_INCLUDE_DIR})
    ENDIF(PTHREAD_ROOT_USER)
    MESSAGE(STATUS "${PTHREAD_INCLUDE_TO_FIND} found in ${PTHREAD_INCLUDE_DIR}")
  ELSE(PTHREAD_INCLUDE_DIR)
    SET(PTHREAD_STATUS 0)
    IF(PTHREAD_ROOT_USER)
      MESSAGE(STATUS "${PTHREAD_INCLUDE_TO_FIND} not found in ${PTHREAD_INCLUDE_PATHS}, check your PTHREAD installation.")
    ELSE(PTHREAD_ROOT_USER)
      MESSAGE(STATUS "${PTHREAD_INCLUDE_TO_FIND} not found on system, try to use WITH_PTHREAD option or PTHREADS_ROOT environment variable.")
    ENDIF(PTHREAD_ROOT_USER)
  ENDIF(PTHREAD_INCLUDE_DIR)
ENDIF(PTHREAD_STATUS)

# ----

IF(PTHREAD_STATUS)
  IF(PTHREAD_ROOT_USER)
    SET(PTHREAD_LIB_PATHS ${PTHREAD_ROOT_USER}/lib)
  ELSE(PTHREAD_ROOT_USER)
    SET(PTHREAD_LIB_PATHS)
  ENDIF(PTHREAD_ROOT_USER)
ENDIF(PTHREAD_STATUS)

IF(PTHREAD_STATUS)
  IF(WINDOWS)
    IF(CMAKE_BUILD_TYPE STREQUAL Release)
      FIND_LIBRARY(PTHREAD_LIB pthreadVSE2 pthreadVC2 PATHS ${PTHREAD_LIB_PATHS} ${PTHREAD_FIND_PATHS_OPTION})
    ELSE(CMAKE_BUILD_TYPE STREQUAL Release)
      FIND_LIBRARY(PTHREAD_LIB pthreadVSE2d pthreadVC2d PATHS ${PTHREAD_LIB_PATHS} ${PTHREAD_FIND_PATHS_OPTION})
    ENDIF(CMAKE_BUILD_TYPE STREQUAL Release)
  ELSE(WINDOWS)
    FIND_LIBRARY(PTHREAD_LIB pthread PATHS ${PTHREAD_LIB_PATHS} ${PTHREAD_FIND_PATHS_OPTION})
  ENDIF(WINDOWS)
  SET(PTHREAD_LIBS)
  IF(PTHREAD_LIB)
    SET(CMAKE_THREAD_LIBS_INIT ${CMAKE_THREAD_LIBS_INIT} ${PTHREAD_LIB})
    MESSAGE(STATUS "pthread lib found: ${PTHREAD_LIB}")
  ELSE(PTHREAD_LIB)
    SET(PTHREAD_STATUS 0)
    IF(PTHREAD_ROOT_USER)
      MESSAGE(STATUS "pthread lib not found in ${PTHREAD_LIB_PATHS}, check your PTHREADS installation.")
    ELSE(PTHREAD_ROOT_USER)
      MESSAGE(STATUS "pthread lib not found on system, try to use WITH_PTHREAD option or PTHREAD_ROOT environment variable.")
    ENDIF(PTHREAD_ROOT_USER)
  ENDIF(PTHREAD_LIB)
ENDIF(PTHREAD_STATUS)

# ----

IF(PTHREAD_STATUS)
ELSE(PTHREAD_STATUS)
  IF(PTHREAD_IS_MANDATORY)
    MESSAGE(FATAL_ERROR "pthreads not found ... mandatory ... abort")
  ELSE(PTHREAD_IS_MANDATORY)
    MESSAGE(STATUS "pthreads not found ... optional ... disabled")
  ENDIF(PTHREAD_IS_MANDATORY)
ENDIF(PTHREAD_STATUS)
