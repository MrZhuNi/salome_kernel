//  Copyright (C) 2007-2008  CEA/DEN, EDF R&D, OPEN CASCADE
//
//  Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
//  CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
//  See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//
//  File   : Notebook.idl
//  Author : Alexandre SOLOVYOV
//  $Header$
//
/*!  \file Notebook.idl  \brief This file contains a set of interfaces used for notebook
     (model parametrization) functionality
*/

#ifndef _NOTEBOOK_IDL_
#define _NOTEBOOK_IDL_

#include "SALOME_GenericObj.idl"

/*! \brief
     This package contains the interfaces used for notebook
     (model parametrization) functionality
*/
module SALOME
{
  interface Notebook;

  exception NotebookError
  {
    string Reason;
  };

  exception ExpressionError
  {
    string Reason;
  };

  exception CalculationError
  {
    string Reason;
  };

  exception TypeError
  {
    string Reason;
  };

  //! Data types supported by notebook functionality
  enum ParamType { TUnknown, TBoolean, TInteger, TReal, TString };

  //! List of strings
  typedef sequence<string> StringArray;

  //! Types of dependencies set
  enum DependenciesType { Objects, Parameters, All };


  //! This interface describes parameterized object
  interface ParameterizedObject : GenericObj
  {
    //! return object's entry
    string GetEntry();

    //! return object's component
    string GetComponent();

    //! validity status
    boolean IsValid();

    /*!
     *  Set list of arguments that this object depends on
     *  \param theParameters is a sequence containing names of notebook variables used for object creation.
     *    Each sequence element corresponds to certain position.
     *    If parameter is empty string, it means that parameter is not used in this position.
     */
    void SetParameters( in Notebook theNotebook, in StringArray theParameters );

    /*!
     *  Get list of arguments that this object depends on.
     *    Each sequence element corresponds to certain position.
     */
    StringArray GetParameters();

    //! update management
    void Update( in Notebook nb ) raises( ExpressionError, CalculationError );
  };



  //! This interface describes parameter object
  interface Parameter : ParameterizedObject
  {
    //! change expression of the parameter
    void SetExpression( in string expr ) raises( NotebookError, ExpressionError );

    //! change value of the parameter
    void SetBoolean( in boolean value );

    //! change value of the parameter
    void SetInteger( in long value );

    //! change value of the parameter
    void SetReal( in double value );

    //! change value of the parameter
    void SetString( in string value );



    //! get expression of the parameter
    string GetExpression( in boolean forceConvert );

    //! return type of parameter
    ParamType GetType();

    //! convert parameter into boolean
    boolean AsBoolean() raises( TypeError );

    //! convert parameter into integer
    long    AsInteger() raises( TypeError );

    //! convert parameter into real
    double  AsReal() raises( TypeError );

    //! convert parameter into string
    string  AsString() raises( TypeError );
  };




  //! This interface describes parameters container: Notebook
  interface Notebook : GenericObj
  {
    //dependency management

    //! add new dependency between objects
    void AddDependency( in ParameterizedObject obj, in ParameterizedObject dep ) raises( NotebookError );

    //! remove dependency between objects
    void RemoveDependency( in ParameterizedObject obj, in ParameterizedObject dep ) raises( NotebookError );

    //! remove all dependencies of the object
    void ClearDependencies( in ParameterizedObject obj, in DependenciesType type );

    //! set internal flags of update: it means that this object and all objects depending on it will be updated
    void SetToUpdate( in ParameterizedObject obj ) raises( NotebookError );

    //! update all objects marked as "need to update"
    void Update( in boolean onlyParameters );



    //parameters management

    //! add new parameter (expression) into notebook
    void AddExpression( in string expr ) raises( NotebookError, ExpressionError, CalculationError );

    //! add new parameter (named expression) into notebook
    void AddNamedExpression( in string name, in string expr ) raises( NotebookError, ExpressionError, CalculationError );

    //! add new parameter (boolean value) into notebook
    void AddBoolean( in string name, in boolean value ) raises( NotebookError );

    //! add new parameter (integer value) into notebook
    void AddInteger( in string name, in long value ) raises( NotebookError );

    //! add new parameter (double value) into notebook
    void AddReal( in string name, in double value ) raises( NotebookError );

    //! add new parameter (string value) into notebook
    void AddString( in string name, in string value ) raises( NotebookError );

    //! remove parameter from notebook
    void Remove( in string name ) raises( NotebookError );

    //! rename parameter in notebook
    void Rename( in string oldName, in string newName ) raises( NotebookError );

    //! access to parameter from notebook
    Parameter GetParameter( in string name );

    //! return list of all names of parameters (without anonymous ones)
    StringArray Parameters();

    //! return list of necessary (by dependencies), but absent parameters
    StringArray AbsentParameters( in string expr );


    //persistence management

    //! save notebook into text file
    boolean Save( in string filename );

    //! load notebook from text file
    boolean Load( in string filename );

    //! load notebook from text file
    string DumpPython();



    //auxiliary methods

    //! Dump of Notebook internal data structure for debug purposes
    string Dump();

    //! Return string containing information about parameters used by object with given component and entry
    string GetParameters( in string theComponent, in string theEntry );
  };
};

#endif
