//  Copyright (C) 2007-2008  CEA/DEN, EDF R&D, OPEN CASCADE
//
//  Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
//  CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
//  See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//
//  File   : SALOMEDS_Attributes.idl
//  Author : Yves FRICAUD
//  $Header$
//
/*! \file SALOMEDS_Attributes.idl 
    \brief This file contains a set of interfaces
    for the attributes which can be assigned to %SObject
*/
#ifndef _SALOMEDS_AttributesIDL_
#define _SALOMEDS_AttributesIDL_

#include "SALOMEDS.idl"

module SALOMEDS
{
//! Sequence of double values
  typedef sequence <double> DoubleSeq;
//! Sequence of long values
  typedef sequence <long>   LongSeq;
//! Sequence of string values
  typedef sequence <string> StringSeq;
/*! \brief  This structure stores a set of elements defining the color based on RGB palette. 
   
   These elements are
   used as input parameters for methods necessary for color definition of different items.
*/
  struct Color {
//! Red color
   double R;
//! Green color
   double G;
//! Blue color
   double B;
  };
  //==========================================================================
/*! \brief Attribute allowing to store a real value

    Attribute allowing to store a real value
*/
 //==========================================================================

  interface AttributeReal : GenericAttribute
  {
//! Returns the value of this attribute.
/*!

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    double Value();
 //! Sets the value of this attribute.
/*!

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in double value);

  };
  //==========================================================================
/*! \brief Attribute allowing to store an integer value

   Attribute allowing to store an integer value
*/
  //==========================================================================
  interface AttributeInteger : GenericAttribute
  {
  //!  Returns the value of this attribute
/*!

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    long   Value();

   //! Sets the value of this attribute
/*!

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in long value);
  };
  //==========================================================================
/*! \brief Attribute - sequence of real values

  Attribute - sequence of real values, indexing from 1 (like in CASCADE).
*/
  //==========================================================================
  interface AttributeSequenceOfReal : GenericAttribute
  {
 //!  Initialization of the attribute with initial data.
/*!
   \param other    Initially assigned sequence of real numbers.
*/
    void      Assign (in DoubleSeq other);
//!  Returns the sequence of real numbers stored in the attribute.
    DoubleSeq CorbaSequence();
/*! \brief Adds to the end of the sequence a real number.

   \param value    A real number added to the sequence.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void      Add (in double value);
/*! \brief  Removes a real number with a definite index
    from the sequence of real numbers stored in the Attribute.

    \param index The index of the given real number
*/
    void      Remove(in long index);
/*! \brief Substitutes a given real number with a definite index for another real number.

    \param index The index of the given real number.
    \param value The value of another real number.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void      ChangeValue(in long index, in double value);
/*! \brief Returns a given real number with a definite index in the sequence of real numbers stored in the Attribute.

    \param index The index of the given real number.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    double    Value(in short index);
/*! \brief Returns the length of the sequence of real numbers stored in the Attribute.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    long      Length();
  };
  //==========================================================================
/*! \brief Attribute - sequence of integer

  Attribute - sequence of integer, indexing from 1 (like in CASCADE)
*/
  //==========================================================================
  interface AttributeSequenceOfInteger : GenericAttribute
  {
/*! \brief Initialisation of the attribute with initial data.
   \param other    Initially assigned sequence of integer numbers.
*/
    void      Assign (in LongSeq other);
//!  Returns the sequence of integer numbers stored in the Attribute.
    LongSeq CorbaSequence();
/*! \brief  Adds to the end of the sequence an integer number.

   \param value    An integer number added to the sequence.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void      Add (in long value);
/*! \brief Removes an integer number with a definite index from the sequence of integer numbers stored in the Attribute.

    \param index The index of the given integer number.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void      Remove(in long index);
/*! \brief Substitutes an integer number with a definite index for another integer number.

    \param index The index of the given integer number.
    \param value The value of another integer number.

*/
    void      ChangeValue(in long index, in long value);
/*!  \brief Returns a given integer number with a definite index in the sequence of integer numbers stored in the Attribute.
    \param index The index of the given integer number.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    long      Value(in short index);
/*! \brief  Returns the length of the sequence of integer numbers stored in the Attribute.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    long      Length();
  };

  //==========================================================================
/*! \brief Name attribute

   This attribute stores a string value, which corresponds to the name of the %SObject
   or to the name of corresponding object.
*/
  //==========================================================================

  interface AttributeName : GenericAttribute
  {
/*! \brief  Returns the value of this attribute

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    string Value();
/*! \brief Sets the value of this attribute

   \param value This parameter defines the value of this attribute.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in string value);
  };

  //==========================================================================
/*! \brief Comment attribute

    This attribute stores a string value containing supplementary information about
    the %SObject. In particular it contains the data type of the %SComponent.
*/
  //==========================================================================
  interface AttributeComment : GenericAttribute
  {
/*! \brief Returns the value of this attribute

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    string Value();
/*! \brief Sets the value of this attribute
   \param value This string parameter defines the value of this attribute - a description of a %SObject.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in string value);
  };
  //==========================================================================
/*! \brief String attribute

    This attribute stores a string value containing arbitrary information.
*/
  //==========================================================================
  interface AttributeString : GenericAttribute
  {
/*!
    Returns the value of this attribute
*/
    string Value();
/*!
   Sets the value of this attribute
   \param value This string parameter defines the value of this attribute.
*/
    void   SetValue(in string value);
  };
  //==========================================================================
/*! \brief IOR attribute

    This attribute stores a string value identifying a runtime object.In particular
    it contains CORBA Interoperable Object Reference.
*/
 //==========================================================================
  interface AttributeIOR : GenericAttribute
  {
/*!
    Returns the value of this attribute

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    string Value();
/*!
   Sets the value of this attribute
   \param value This parameter defines the value of this attribute - IOR of a %SObject.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in string value);
  };

  //==========================================================================
/*! \brief Persistent reference attribute

     This attribute stores a persistent identifier of the object.
*/
  //==========================================================================
  interface AttributePersistentRef : GenericAttribute
  {
/*!
    Returns the value of this attribute

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    string Value();
/*!
   Sets the value of this attribute
   \param value This parameter defines the value of this attribute.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in string value);
  };

  //==========================================================================
/*! \brief External File definition

     This attribute stores a path to an External File.
*/
  //==========================================================================
  interface AttributeExternalFileDef: GenericAttribute
  {
/*!
    Returns the value of this attribute
<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    string Value();
/*!
   Sets the value of this attribute
<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in string value);
  };

  //==========================================================================
/*! \brief File Type definition

     This attribute stores an external File Type (see ExternalFileDef attribute).
*/
  //==========================================================================
  interface AttributeFileType: GenericAttribute
  {
/*!
    Returns the value of this attribute
<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    string Value();
/*!
   Sets the value of this attribute
<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in string value);
  };

  //==========================================================================
  //Below the list of presentation attributes for display study tree in browser
  //==========================================================================


  //==========================================================================
/*! \brief Drawable flag Attribute.

   This is a presentation attribute necessary for display of a study tree in the browser.
   The item associated to a %SObject is created/displayed if TRUE.
*/
  //==========================================================================
  interface AttributeDrawable : GenericAttribute
  {
/*!
   Returns TRUE if the item is drawable (as it is by default) and FALSE if it isn't.

<em>See \ref example8 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    boolean IsDrawable();
/*!
Sets the item to be drawable.

\param value If the value of this boolean parameter is TRUE (default) the item will be drawable.

<em>See \ref example8 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void   SetDrawable(in boolean value);
  };

  //==========================================================================
/*! \brief Selectable flag Attribute.

  This is a presentation attribute necessary for display of the study tree in the browser.
  The item is selectable by %SALOME selection mechanism if TRUE.
*/
  //==========================================================================
  interface AttributeSelectable : GenericAttribute
  {
/*!
   Returns TRUE if the item is selectable (as it is by default) and FALSE if it isn't.


<em>See \ref example9 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    boolean IsSelectable();
/*!
Sets the item to be selectable

\param value If the value of this parameter is TRUE (the default) the item will be set as selectable.

<em>See \ref example9 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void   SetSelectable(in boolean value);
  };

  //==========================================================================
/*! \brief Expandable flag Attribute.

 This is a presentation attribute necessary for display of the study tree in the browser.
 It sets this item to be expandable even if it has no children if value is TRUE. If value is FALSE
 expandable only if it has children.
*/
  //==========================================================================
  interface AttributeExpandable : GenericAttribute
  {
/*!
    Returns TRUE if this item is expandable even when it has no children.

<em>See \ref example10 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    boolean IsExpandable();
/*! Sets this item to be expandable even if it has no children.

 \param value If the value of this boolean parameter is TRUE, this item will be set as expandable.

<em>See \ref example10 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void   SetExpandable(in boolean value);
  };

  //==========================================================================
/*! \brief Flags Attribute.

   This interface is intended for storing different object attributes that
   have only two states (0 and 1).
*/
  //==========================================================================

  interface AttributeFlags : GenericAttribute
  {
    long    GetFlags();
    void    SetFlags( in long theFlags );

    boolean Get( in long theFlag );
    void    Set( in long theFlag, in boolean theValue );
  };

  //==========================================================================
/*! \brief Graphic Attribute.
   This class is intended for storing information about
   graphic representation of objects in dirrent views
*/
  //==========================================================================

  interface AttributeGraphic : GenericAttribute
  {
    void     SetVisibility( in long theViewId, in boolean theValue );
    boolean  GetVisibility( in long theViewId );
  };  

  //==========================================================================
/*! \brief Opened flag Attribute.

   This is a presentation attribute necessary for display of the study tree in the browser.
   It sets this item to be open (its children are visible) if bool is TRUE, and to be closed (its children
   are not visible) if bool is FALSE.
*/
  //==========================================================================
  interface AttributeOpened : GenericAttribute
  {
/*!
    Returns TRUE if this item is open (its children are visible) and FALSE if it isn't.

<em>See \ref example11 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    boolean IsOpened();
/*!
   Sets this item to be open (its children are visible)

   \param value If the value of this boolean parameter is TRUE this item will be set as open,
    and as closed if FALSE.

<em>See \ref example11 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void   SetOpened(in boolean value);
  };
  //==========================================================================
/*! \brief TextColorAttribute.

     This attribute sets the color of an item.
*/
  //==========================================================================
  interface AttributeTextColor : GenericAttribute
  {
/*!
   Returns the color of an item.

<em>See \ref example12 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    Color TextColor();
/*!
   Sets the color of an item.

   \param value This parameter defines the color of the item.

<em>See \ref example12 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void   SetTextColor(in Color value);
  };

  //==========================================================================
  /*! \brief TextHighlightColorAttribute.

     This attribute sets the highlight color of an item.
*/
  //==========================================================================
  interface AttributeTextHighlightColor : GenericAttribute
  {
/*!
   Returns the highlight color of an item.



<em>See \ref example13 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    Color TextHighlightColor();
/*!
   Sets the highlight color of an item.
   \param value This parameter defines the highlight color of the item.

<em>See \ref example13 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void   SetTextHighlightColor(in Color value);
  };
  //==========================================================================
/*! \brief PixMapAttribute.

    This attribute stores an icon which is put before the name of an item.
*/
  //==========================================================================
  interface AttributePixMap : GenericAttribute
  {
/*!
   Returns True if there is an icon before the name of the given item.
*/
    boolean HasPixMap();
/*!
   Returns the name of the icon in the format of a string.

<em>See \ref example14 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    string  GetPixMap();
/*!
   Sets the name of the icon.
   \param value This string parameter defines the name of the icon.

<em>See \ref example14 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void    SetPixMap(in string value);
  };

  //==========================================================================
/*! \brief TreeNodeAttribute.

   A set of these attributes on the %SObjects of the %study forms an inner auxiliary
   tree whith its own structure and identifier. The quantity of such trees with different
   identifiers can be arbitrary.

<em>See \ref example18 for an example of usage of the methods of this interface in batchmode of %SALOME application.</em>

*/
  //==========================================================================
  interface AttributeTreeNode : GenericAttribute
  {
/*!
  Assigns the father tree node to this tree node.
*/
    void              SetFather(in AttributeTreeNode value);
/*!
  Returns True if there is a father tree node of this tree node.
*/
    boolean           HasFather();
/*!
  Returns the father tree node of this tree node.
*/
    AttributeTreeNode GetFather();
/*!
  Assigns the previous brother tree node to the given tree node.
*/
    void              SetPrevious(in AttributeTreeNode value);
/*!
  Returns True if there is the previous brother tree node of this tree node.
*/
    boolean           HasPrevious();
/*!
  Returns the previous brother tree node of this tree node.
*/
    AttributeTreeNode GetPrevious();
/*!
  Sets the next brother tree node to this tree node.
*/
    void              SetNext(in AttributeTreeNode value);
/*!
  Returns True if there is the next brother tree node of this tree node.
*/
    boolean           HasNext();
/*!
  Returns the previous brother tree node of this tree node.
*/
    AttributeTreeNode GetNext();
/*!
  Sets the first child tree node to this tree node.
*/
    void              SetFirst(in AttributeTreeNode value);
/*!
  Returns True if there is the first child tree node of this tree node.
*/
    boolean           HasFirst();
/*!
  Returns the first child tree node of this tree node.
*/
    AttributeTreeNode GetFirst();
/*!
  Sets ID of a tree.
  \param value String parameter defining the ID of a tree.
  \note <br>Tree nodes of one tree have the same ID.
*/
    void              SetTreeID(in string value);
/*!
  Gets ID of a tree.
  \return An ID of a tree in the format of a string.
*/
    string            GetTreeID();

/*!
   Adds a child tree node to the end of the list of children of this tree node.
*/
    void              Append(in AttributeTreeNode value);
/*!
   Adds a child tree node to the beginning of the list of children of this tree node.

*/
    void              Prepend(in AttributeTreeNode value);
/*!
   Adds a brother tree node before this tree node.
    In this case the both tree nodes will belong to the same father.
*/
    void              InsertBefore(in AttributeTreeNode value);
/*!
   Adds a brother tree node after this tree node.
    In this case the both tree nodes will belong to the same father.
*/
    void              InsertAfter(in AttributeTreeNode value);
/*!
   Deletes a tree node.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void              Remove();

/*!
   Returns  the  depth  of the tree node in the
   structure, it means the  number of  fathers of the given tree node.
   (i.e.: the depth of the root tree node is 0).
*/
    long              Depth();
/*!
    Returns True if it is a root tree node.
*/
    boolean           IsRoot();
/*!
    Returns True if this tree node is a descendant of the tree node.
*/
    boolean           IsDescendant(in AttributeTreeNode value);
/*!
    Returns True if this tree node is the father of the tree node.
*/
    boolean           IsFather(in AttributeTreeNode value);
/*!
    Returns True if this tree node is a child of the tree node.
*/
    boolean           IsChild(in AttributeTreeNode value);
/*!
   Returns ID of the according %SObject.
*/
    string            Label();
  };
  //==========================================================================
/*! \brief LocalID attribute

   Attribute describing the link between a %SObject and a local object in the component.
*/
  //==========================================================================
  interface AttributeLocalID : GenericAttribute
  {
/*!
   Returns the value of this attribute.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    long   Value();
/*!
   Sets the value of this attribute.

   \param value This parameter defines the local ID which will be set.

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in long value);
  };

  //==========================================================================
/*! \brief Attribute storing GUID

    Attribute allowing to store GUID
*/
  //==========================================================================
  interface AttributeUserID : GenericAttribute
  {
/*!
   Returns the value of this attribute

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    string Value();
/*!
   Sets the value of this attribute

<em>See \ref example1 for an example of this method usage in batchmode of %SALOME application.</em>
*/
    void   SetValue(in string value);
  };

  //==========================================================================
/*! \brief %AttributeTarget iterface

   This attribute stores the list of all %SObjects that refer
   to this %SObject. This attribute is used for inner purposes of the application.
   It is also needed for optimization.
*/
  //==========================================================================

  interface AttributeTarget : GenericAttribute
  {
/*!
    Adds a %SObject to the list of %SObjects which refer to this %SObject.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void          Add(in SObject anObject);
/*!
    Returns a list of %SObjects which refer to this %SObject.
*/
    SALOMEDS::Study::ListOfSObject Get();
/*!
    Deletes a %SObject from the list of %SObjects which refer to this %SObject.

<em>See \ref example3 for an example of this method usage in batchmode of %SALOME application.</em>

*/
    void          Remove(in SObject anObject);
  };

  //==========================================================================
  /*!
    \brief Generic table attribute.

    Used as base interface for the AttributeTableOfInteger, AttributeTableOfReal
    and AttributeTableOfString. Provides functions which are common for all table
    attributes.

    \note The indices of rows and columns in the table start from 1.
    \sa AttributeTableOfInteger, AttributeTableOfReal, AttributeTableOfString
  */
  //==========================================================================

  interface AttributeTable : GenericAttribute
  {
    //! This exception is raised when an invalid (out of range) index is passed as parameter.
    exception IncorrectIndex {};
    //! This exception is raised when sequence of incorrect length is passed as parameter.
    exception IncorrectArgumentLength {};

    //! Sort order
    enum SortOrder { 
      AscendingOrder,  //!< The items are sorted ascending
      DescendingOrder  //!< The items are sorted descending
    };

    //! Sort policy (specifies how empty cells are taken into account when sorting)
    enum SortPolicy {
      EmptyLowest,     //!< Empty cells are considered as lowest values
      EmptyHighest,    //!< Empty cells are considered as highest values
      EmptyFirst,      //!< Empty cells are always first
      EmptyLast,       //!< Empty cells are always last
      EmptyIgnore      //!< Empty cells are ignored (stay at initial positions)
    };

    /*!
      \brief Sets the main title of the table.
      \param title title being set to the table
      \sa GetTitle()
    */
    void SetTitle(in string title);
    /*!
      \brief Returns the title of the table.
      \return table title (empty string if not set)
      \sa SetTitle()
    */
    string GetTitle();
    /*!
      \brief Sets the title of a row with specified index.

      Raises an exception if \a row is out of range.

      \param row row index
      \param title title being set to the row
      \sa GetRowTitle()
    */
    void SetRowTitle(in long row, in string title) raises(IncorrectIndex);
    /*!
      \brief Returns the title of a row with specified index.

      Raises an exception if \a row is out of range.

      \param row row index
      \return row title (empty string if not set)
      \sa SetRowTitle()
    */
    string GetRowTitle(in long row) raises(IncorrectIndex);
    /*!
      \brief Sets the titles for all rows in the table.

      Raises an exception if length of the \a titles parameter is not equal
      to the number of rows in the table.

      \param titles titles being set to the table rows
      \sa GetRowTitles()
    */
    void SetRowTitles(in StringSeq titles) raises(IncorrectArgumentLength);
    /*!
      \brief Returns the titles of all rows of the table.
      \return list of all rows titles
      \sa SetRowTitles()
    */
    StringSeq GetRowTitles();
    /*!
      \brief Sets the title of a column with specified index.

      Raises an exception if \a column is out of range.

      \param column column index
      \param title title being set to the column
      \sa GetColumnTitle()
    */
    void SetColumnTitle(in long column, in string title) raises(IncorrectIndex);
    /*!
      \brief Returns the title of a column with specified index.

      Raises an exception if \a column is out of range.

      \param column column index
      \return column title (empty string if not set)
      \sa SetColumnTitle()
    */
    string GetColumnTitle(in long column) raises(IncorrectIndex);
    /*!
      \brief Sets the titles for all columns in the table.

      Raises an exception if length of the \a titles parameter is not equal
      to the number of columns in the table.

      \param titles titles being set to the table columns
      \sa GetColumnTitles()
    */
    void SetColumnTitles(in StringSeq titles) raises(IncorrectArgumentLength);
    /*!
      \brief Returns the titles of all columns of the table.
      \return list of all columns titles
      \sa SetColumnTitles()
    */
    StringSeq GetColumnTitles();
    /*!
      \brief Assigns the unit label to the row with specified index.

      Raises an exception if \a row is out of range.

      \param row row index
      \param unit unit label being set to the row
      \sa GetRowUnit()
    */
    void SetRowUnit(in long row, in string unit) raises(IncorrectIndex);
    /*!
      \brief Returns the unit label of a row with specified index.

      Raises an exception if \a row is out of range.

      \param row row index
      \return row unit label (empty string if not set)
      \sa SetRowUnit()
    */
    string GetRowUnit(in long row) raises(IncorrectIndex);
    /*!
      \brief Sets the unit labels for all rows in the table.

      Raises an exception if length of the \a units parameter is not equal
      to the number of rows in the table.

      \param units unit labels being set to the table rows
      \sa GetRowUnits()
    */
    void SetRowUnits(in StringSeq units) raises(IncorrectArgumentLength);
    /*!
      \brief Returns the unit labels of all rows of the table.
      \return list of all rows unit labels
      \sa SetRowUnits()
    */
    StringSeq GetRowUnits();
    /*!
      \brief Returns the number of rows of the table.
      \return rows count
      \sa GetNbColumns()
    */
    long GetNbRows();
    /*!
      \brief Returns the number of columns of the table.
      \return columns count
      \sa GetNbRows(), SetNbColumns()
    */
    long GetNbColumns();
    /*!
      \brief Check if the value is set for the cell with specified \a row and \a column indices.
      \param row    row index
      \param column column index
      \return \c true if value is set for the specified cell or \c false otherwise
              (or if row/column index is/are out of range)
    */
    boolean HasValue(in long row, in long column);
    /*!
      \brief Clear value in the specified table cell.
      
      Raises an exception if \a row or \a column is out of range.

      \param row    row index
      \param column column index
      \sa HasValue()
    */
    void RemoveValue(in long row, in long column) raises(IncorrectIndex);
    /*!
      \brief Sets the maximum number of colums in the table.

      If new number of columns is less than the current one, the table is truncated
      (extra columns are removed).

      \note It is recommended to set number of columns before assigning data to the table.

      \param columns total number of columns being set for the table
      \sa GetNbColumns()
    */
    void SetNbColumns(in long columns);
    /*!
      \brief Returns the indices of the columns in the specified \a row for which
      values are set.

      Raises an exception if \a row is out of range.

      \param row    row index
      \return list of column indices
    */
    LongSeq GetRowSetIndices(in long row) raises(IncorrectIndex);
    /*!
      \brief Sort values in the specified table row.
      
      Sort order is specified by the \a order parameter. The \a policy
      specifies how to process empty cells (put to the first place, ignore, etc).

      Raises an exception if \a row is out of range.

      \note Other table rows are not affected.
      
      \param row row index
      \param order sort order (ascending/descending)
      \param policy sort policy (specifies how to process empty cells)
      \return list of mixed column indices
    */
    LongSeq SortRow(in long row, in SortOrder order, in SortPolicy policy) raises(IncorrectIndex);
    /*!
      \brief Sort values in the specified table column.
      
      Sort order is specified by the \a order parameter. The \a policy
      specifies how to process empty cells (put to the first place, ignore, etc).

      Raises an exception if \a column is out of range.

      \note Other table columns are not affected.
      
      \param column column index
      \param order sort order (ascending/descending)
      \param policy sort policy (specifies how to process empty cells)
      \return list of mixed row indices
    */
    LongSeq SortColumn(in long column, in SortOrder order, in SortPolicy policy) raises(IncorrectIndex);
    /*!
      \brief Sort table columns by the specified row.
      
      All the table columns are sorted according to the values in the specified
      row. Sort order is specified by the \a order parameter. The \a policy
      specifies how to process empty cells (put to the first place, ignore, etc).
      
      Raises an exception if \a row is out of range.

      \param row row index
      \param order sort order (ascending/descending)
      \param policy sort policy (specifies how to process empty cells)
      \return list of mixed column indices
    */
    LongSeq SortByRow(in long row, in SortOrder order, in SortPolicy policy) raises(IncorrectIndex);
    /*!
      \brief Sort table rows by the specified column.
      
      All the table rows are sorted according to the values in the specified
      column. Sort order is specified by the \a order parameter. The \a policy
      specifies how to process empty cells (put to the first place, ignore, etc).
      
      Raises an exception if \a column is out of range.

      \param column column index
      \param order sort order (ascending/descending)
      \param policy sort policy (specifies how to process empty cells)
      \return list of mixed row indices
    */
    LongSeq SortByColumn(in long column, in SortOrder order, in SortPolicy policy) raises(IncorrectIndex);
    /*!
      \brief Swap values in two table cells.

      Raises an exception if any specified index is out of range.

      \param row1    first cell's row index
      \param column1 first cell's column index
      \param row2    second cell's row index
      \param column2 second cell's column index
    */
    void SwapCells(in long row1, in long column1, in long row2, in long column2) raises(IncorrectIndex);
    /*!
      \brief Swap two table rows.

      Raises an exception if any \a row1 or \a row2 is out of range.

      \param row1 first row's index
      \param row2 second row's index
    */
    void SwapRows(in long row1, in long row2) raises(IncorrectIndex);
    /*!
      \brief Swap two table columns.

      Raises an exception if any \a column1 or \a column2 is out of range.

      \param column1 first column's index
      \param column2 second column's index
    */
    void SwapColumns(in long column1, in long column2) raises(IncorrectIndex);
    /*!
      \brief Reads a table from a byte stream.
      \param fileStream byte stream
      \return \c true if table is successfully read or \c false otherwise
      \sa SaveToFile()
    */
    boolean ReadFromFile(in SALOMEDS::TMPFile fileStream);
    /*!
      \brief Saves a table into a byte stream.
      \return byte stream with table representation
      \sa ReadFromFile()
    */
    SALOMEDS::TMPFile SaveToFile();
  };

  //==========================================================================
  /*!
    \brief Table of %integer values

    This attribute allows to store a table of %integer values. It is possible 
    to specify titles for rows and columns. In addition, the unis labels can be
    assigned to the rows. And finally, the table iself can have title.

    \note The indices of rows and columns in the table start from 1.

    <em>See \ref example21 for an example of usage of this attribute in batchmode of %SALOME application.</em>

    \sa AttributeTable, AttributeTableOfReal, AttributeTableOfString
  */
  //==========================================================================

  interface AttributeTableOfInteger : AttributeTable
  {
    /*!
      \brief Appends new row to the table.
      
      If the length of the \a data parameter is greater than current number of columns
      in the table, the table is automatically resized.
      
      \param data sequence of values which will be set as elements of the added row
      \sa SetRow(), GetRow(), AddColumn()
    */
    void AddRow(in LongSeq data) raises(IncorrectArgumentLength);
    /*!
      \brief Replaces all the elements of the specified \a row with new values.

      Raises an exception if \a row is out of range or if the length of the
      \a data parameter is not equal to the number of columns in the table.

      \param row row index
      \param data sequence of values being set as values of the row
      \sa GetRow(), AddRow(), SetColumn()
    */
    void SetRow(in long row, in LongSeq data) raises(IncorrectArgumentLength, IncorrectIndex);
    /*!
      \brief Returns all the values of the specified row in the table.

      Raises an exception if \a row is out of range.
      
      \note For empty cells 0 value is returned.

      \param row row index
      \return sequence of values which are set as elements of the row.
      \sa SetRow(), AddRow()
    */
    LongSeq GetRow(in long row) raises(IncorrectIndex);
    /*!
      \brief Appends new column to the table.
      
      If the length of the \a data parameter is greater than current number of rows
      in the table, the table is automatically resized.
      
      \param data sequence of values which will be set as elements of the added column
      \sa SetColumn(), GetColumn(), AddRow()
    */
    void AddColumn(in LongSeq data) raises(IncorrectArgumentLength);
    /*!
      \brief Replaces all the elements of the specified column with new values.

      Raises an exception if \a column is out of range or if the length of the
      \a data parameter is not equal to the number of rows in the table.

      \param column column index
      \param data sequence of values being set as values of the column
      \sa GetColumn(), AddColumn(), SetRow()
    */
    void SetColumn(in long column, in LongSeq data) raises(IncorrectArgumentLength, IncorrectIndex);
    /*!
      \brief Returns all the values of the specified column in the table.

      Raises an exception if \a column is out of range.
      
      \note For empty cells 0 value is returned.
      
      \param column column index
      \return sequence of values which are set as elements of the column.
      \sa SetColumn(), AddColumn()
    */
    LongSeq GetColumn(in long column) raises(IncorrectIndex);
    /*!
      \brief Puts a value to the table cell specified by \a row and \a column indices.

      If the \a row and/or \a column parameter(s) are greater than current number of rows/columns
      in the table, the table is automatically resized.
      
      \param value  value being set to the table cell
      \param row    row index
      \param column column index
      \sa GetValue(), HasValue()
    */
    void PutValue(in long value, in long row, in long column) raises(IncorrectIndex);
    /*!
      \brief Returns the value from the cell table.

      Raises an exception if \a row or \a column is out of range or 
      if value is not set for the specified table cell.
      
      \param row    row index
      \param column column index
      \return value assigned to the table cell
      \sa PutValue(), HasValue()
    */
    long GetValue(in long row, in long column) raises(IncorrectIndex);
  };

  //==========================================================================
  /*!
    \brief Table of real values

    This attribute allows to store a table of real values. It is possible 
    to specify titles for rows and columns. In addition, the unis labels can be
    assigned to the rows. And finally, the table iself can have title.

    \note The indices of rows and columns in the table start from 1.

    <em>See \ref example22 for an example of usage of this attribute in batchmode of %SALOME application.</em>

    \sa AttributeTable, AttributeTableOfInteger, AttributeTableOfString
  */
  //==========================================================================

  interface AttributeTableOfReal : AttributeTable
  {
    /*!
      \brief Appends new row to the table.
      
      If the length of the \a data parameter is greater than current number of columns
      in the table, the table is automatically resized.
      
      \param data sequence of values which will be set as elements of the added row
      \sa SetRow(), GetRow(), AddColumn()
    */
    void AddRow(in DoubleSeq data) raises(IncorrectArgumentLength);
    /*!
      \brief Replaces all the elements of the specified \a row with new values.

      Raises an exception if \a row is out of range or if the length of the
      \a data parameter is not equal to the number of columns in the table.

      \param row row index
      \param data sequence of values being set as values of the row
      \sa GetRow(), AddRow(), SetColumn()
    */
    void SetRow(in long row, in DoubleSeq data) raises(IncorrectArgumentLength, IncorrectIndex);
    /*!
      \brief Returns all the values of the specified row in the table.

      Raises an exception if \a row is out of range.
      
      \note For empty cells 0.0 value is returned.
      
      \param row row index
      \return sequence of values which are set as elements of the row.
      \sa SetRow(), AddRow()
    */
    DoubleSeq GetRow(in long row) raises(IncorrectIndex);
    /*!
      \brief Appends new column to the table.
      
      If the length of the \a data parameter is greater than current number of rows
      in the table, the table is automatically resized.
      
      \param data sequence of values which will be set as elements of the added column
      \sa SetColumn(), GetColumn(), AddRow()
    */
    void AddColumn(in DoubleSeq data) raises(IncorrectArgumentLength);
    /*!
      \brief Replaces all the elements of the specified column with new values.

      Raises an exception if \a column is out of range or if the length of the
      \a data parameter is not equal to the number of rows in the table.

      \param column column index
      \param data sequence of values being set as values of the column
      \sa GetColumn(), AddColumn(), SetRow()
    */
    void SetColumn(in long column, in DoubleSeq data) raises(IncorrectArgumentLength, IncorrectIndex);
    /*!
      \brief Returns all the values of the specified column in the table.

      Raises an exception if \a column is out of range.
      
      \note For empty cells 0.0 value is returned.

      \param column column index
      \return sequence of values which are set as elements of the column.
      \sa SetColumn(), AddColumn()
    */
    DoubleSeq GetColumn(in long column) raises(IncorrectIndex);
    /*!
      \brief Puts a value to the table cell specified by \a row and \a column indices.

      If the \a row and/or \a column parameter(s) are greater than current number of rows/columns
      in the table, the table is automatically resized.
      
      \param value  value being set to the table cell
      \param row    row index
      \param column column index
      \sa GetValue(), HasValue()
    */
    void PutValue(in double value, in long row, in long volumn) raises(IncorrectIndex);
    /*!
      \brief Returns the value from the cell table.

      Raises an exception if \a row or \a column is out of range or 
      if value is not set for the specified table cell.
      
      \param row    row index
      \param column column index
      \return value assigned to the table cell
      \sa PutValue(), HasValue()
    */
    double GetValue(in long row, in long column) raises(IncorrectIndex);
  };

  //==========================================================================
  /*!
    \brief Table of string values

    This attribute allows to store a table of string values. It is possible 
    to specify titles for rows and columns. In addition, the unis labels can be
    assigned to the rows. And finally, the table iself can have title.

    \note The indices of rows and columns in the table start from 1.
    \sa AttributeTable, AttributeTableOfInteger, AttributeTableOfReal
  */
  //==========================================================================
  interface AttributeTableOfString : AttributeTable
  {
    /*!
      \brief Appends new row to the table.
      
      If the length of the \a data parameter is greater than current number of columns
      in the table, the table is automatically resized.
      
      \param data sequence of values which will be set as elements of the added row
      \sa SetRow(), GetRow(), AddColumn()
    */
    void AddRow(in StringSeq data) raises(IncorrectArgumentLength);
    /*!
      \brief Replaces all the elements of the specified \a row with new values.

      Raises an exception if \a row is out of range or if the length of the
      \a data parameter is not equal to the number of columns in the table.

      \param row row index
      \param data sequence of values being set as values of the row
      \sa GetRow(), AddRow(), SetColumn()
    */
    void SetRow(in long row, in StringSeq data) raises(IncorrectArgumentLength, IncorrectIndex);
    /*!
      \brief Returns all the values of the specified row in the table.

      Raises an exception if \a row is out of range.
      
      \note For empty cells empty string is returned.

      \param row row index
      \return sequence of values which are set as elements of the row.
      \sa SetRow(), AddRow()
    */
    StringSeq GetRow(in long row) raises(IncorrectIndex);
    /*!
      \brief Appends new column to the table.
      
      If the length of the \a data parameter is greater than current number of rows
      in the table, the table is automatically resized.
      
      \param data sequence of values which will be set as elements of the added column
      \sa SetColumn(), GetColumn(), AddRow()
    */
    void AddColumn(in StringSeq data) raises(IncorrectArgumentLength);
    /*!
      \brief Replaces all the elements of the specified column with new values.

      Raises an exception if \a column is out of range or if the length of the
      \a data parameter is not equal to the number of rows in the table.

      \param column column index
      \param data sequence of values being set as values of the column
      \sa GetColumn(), AddColumn(), SetRow()
    */
    void SetColumn(in long column, in StringSeq data) raises(IncorrectArgumentLength, IncorrectIndex);
    /*!
      \brief Returns all the values of the specified column in the table.

      Raises an exception if \a column is out of range.
      
      \note For empty cells empty string is returned.

      \param column column index
      \return sequence of values which are set as elements of the column.
      \sa SetColumn(), AddColumn()
    */
    StringSeq GetColumn(in long column) raises(IncorrectIndex);
    /*!
      \brief Puts a value to the table cell specified by \a row and \a column indices.

      If the \a row and/or \a column parameter(s) are greater than current number of rows/columns
      in the table, the table is automatically resized.
      
      \param value  value being set to the table cell
      \param row    row index
      \param column column index
      \sa GetValue(), HasValue()
    */
    void PutValue(in string value, in long row, in long column) raises(IncorrectIndex);
    /*!
      \brief Returns the value from the cell table.

      Raises an exception if \a row or \a column is out of range or 
      if value is not set for the specified table cell.
      
      \param row    row index
      \param column column index
      \return value assigned to the table cell
      \sa PutValue(), HasValue()
    */
    string GetValue(in long row, in long column) raises(IncorrectIndex);
  };

  //==========================================================================
/*! \brief %AttributeStudyProperties interface

   This attribute allows to store study properties: user name, creation date, creation
   mode, modified flag, locked flag.
<em>See \ref example20 for an example of usage of these methods in batchmode of %SALOME application.</em>

*/
  //==========================================================================

  interface AttributeStudyProperties : GenericAttribute
  {
/*!
   Sets the name of the author of the %Study
*/
    void SetUserName(in string theName);
/*!
     Returns the name of the user of the %Study.
    \note <BR>It returns a null string, if user name is not set
*/
    string GetUserName();
/*!
   Sets creation date of the %Study.
*/
    void SetCreationDate(in long theMinute, in long theHour, in long theDay, in long theMonth, in long theYear);
/*!
     Returns creation date of the %Study and True if creation date is set.
*/
    boolean GetCreationDate(out long theMinute, out long theHour, out long theDay, out long theMonth, out long theYear);
/*!
   Sets creation mode of the %Study.
   \note <BR>Creation mode must be: "from scratch" or "copy from".
*/
    void SetCreationMode(in string theMode);
/*!
   Returns creation mode: "from scratch", "copy from", or null string
   if creation mode is not set
*/
    string GetCreationMode();
/*!
   Sets the number of transactions executed after the last saving of the document.
*/
    void SetModified(in long theModified);
/*!
    Returns True, if the document has been modified and not saved.
*/
    boolean IsModified();
/*!
  Returns the number of transactions executed after the last saving of the document.
*/
    long GetModified();
/*!
    Sets the document locked for modifications if <VAR>theLocked</VAR> is True.
*/
    void SetLocked(in boolean theLocked);
/*!
    Returns True if the document is locked for modifications.
*/
    boolean IsLocked();
/*!
   Appends modification parameters to the modifications list.
*/
    void SetModification(in string theName, in long theMinute, in long theHour, in long theDay, in long theMonth, in long theYear);
/*!
   Returns a list of mosdifiers user names, modification dates.
   /note <BR>If <VAR>theWithCreator</VAR> is True, then the output list will also contain the name of the author and the date of creation.
*/
    void GetModificationsList(out StringSeq theNames, out LongSeq theMinutes, out LongSeq theHours, out LongSeq theDays, out LongSeq theMonths, out LongSeq theYears, in boolean theWithCreator);
  };
  //==========================================================================
/*! \brief %AttributePythonObject interface

    Attribute allowing to store pyton objects as a sequence of chars.
*/
  //==========================================================================

  interface AttributePythonObject : GenericAttribute
  {
/*!
   Sets in the attribute a Python object converted into a sequence of chars.
   \param theSequence    A sequence of chars.
   \param IsScript       Defines (if True) whether this sequence of chars is a Python script.
*/
    void SetObject(in string theSequence, in boolean IsScript);
/*!
    Returns a Python object stored in the attribute as a sequence of chars.
*/
    string GetObject();
/*!
    Returns True if the sequence of bytes stored in the attribute corresponds
    to a Python script.
*/
    boolean IsScript();
  };
  //==========================================================================
/*! \brief %AttributeParameter interface

    Attribute is a universal container of basic types
*/
  //==========================================================================
  interface AttributeParameter : GenericAttribute
  {
/*!
  Associates a integer value with the ID
  \param theID        An ID of a parameter.
  \param theValue     A value of the parameter
*/
    void SetInt(in string theID, in long theValue);
/*!
  Returns a int value associated with the given ID
  \param theID        An ID of a parameter.
*/
    long GetInt(in string theID);

/*!
  Associates a real value with the ID
  \param theID        An ID of a parameter.
  \param theValue     A value of the parameter
*/
    void SetReal(in string theID, in double theValue);
/*!
  Returns a real value associated with the given ID
  \param theID        An ID of a parameter.
*/
    double GetReal(in string theID);

/*!
  Associates a string value with the ID
  \param theID        An ID of a parameter.
  \param theValue     A value of the parameter
*/
    void SetString(in string theID, in string theValue);
/*!
  Returns a string value associated with the given ID
  \param theID        An ID of a parameter.
*/
    string GetString(in string theID);
  
/*!
  Associates a boolean value with the ID
  \param theID        An ID of a parameter.
  \param theValue     A value of the parameter
*/
    void SetBool(in string theID, in boolean theValue);
/*!
  Returns a boolean value associated with the given ID
  \param theID        An ID of a parameter.
*/
    boolean GetBool(in string theID);
  
/*!
  Associates an array of real values with the ID
  \param theID        An ID of a parameter.
  \param theArray     The array of real values
*/
    void SetRealArray(in string theID, in DoubleSeq theArray);
/*!
  Returns an array of real values associated with the ID
  \param theID        An ID of a parameter.
*/
    DoubleSeq GetRealArray(in string theID);

/*!
  Associates an array of integer values with the ID
  \param theID        An ID of a parameter.
  \param theArray     The array of integer values
*/
    void SetIntArray(in string theID, in LongSeq theArray);
/*!
  Returns an array of integer values associated with the ID
  \param theID        An ID of a parameter.
*/
    LongSeq GetIntArray(in string theID);

/*!
  Associates an array of string values with the ID
  \param theID        An ID of a parameter.
  \param theArray     The array of string values
*/
    void SetStrArray(in string theID, in StringSeq theArray);
/*!
  Returns an array of string values associated with the ID
  \param theID        An ID of a parameter.
*/
    StringSeq GetStrArray(in string theID);
/*!
  Returns True if for the ID of given type was assigned a value in the attribute
  \param theID        An ID of a parameter.
  \param theType      A type of parameter [0(Int), 1(Real), 2(Boolean), 3(String), 4(RealArray), 5(IntArray), 6(StrArray)].
*/
    boolean IsSet(in string theID, in long theType);
/*!
  Removes a parameter with given ID and Type, returns True if succeded
  \param theID        An ID of a parameter.
  \param theType      A type of parameter [0(Int), 1(Real), 2(Boolean), 3(String), 4(RealArray), 5(IntArray), 6(StrArray)].
*/
    boolean RemoveID(in string theID, in long theType);
/*!
   Returns a father attribute of this attribute
*/
    AttributeParameter GetFather();
/*!
   Returns True if this attribute has a father attribute
*/
    boolean HasFather();
/*!
   Returns True if this attribute is a root attribute
*/
    boolean IsRoot();
/*!
   Clears the content of the attribute
*/
    void Clear();
/*!   
  Returns a sequence of ID's of the give type
  \param theType      A type of parameter [0(Int), 1(Real), 2(Boolean), 3(String), 4(RealArray), 5(IntArray), 6(StrArray)].
 */ 
    StringSeq GetIDs(in long theType);
  };
};
#endif
