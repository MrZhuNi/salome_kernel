// Copyright (C) 2007-2014  CEA/DEN, EDF R&D, OPEN CASCADE
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//
// Author : Anthony GEAY (EDF R&D)

#include "SALOME_GenericObj.idl"

module SALOME
{
  typedef sequence<string> StringVec;
  typedef sequence<octet> ByteVec;
  
  interface BasicDataServer : GenericObj
  {
    string getVarName();
    string getScopeName();
    void setReadOnlyStatus();
    void setRWStatus();
  };

  interface StringDataServer : BasicDataServer
  {
    void setSerializedContent(in ByteVec newValue);
    ByteVec fetchSerializedContent();
    StringDataServer invokePythonMethodOn(in string method, in ByteVec args);
  };

  interface DataServerManager;

  interface DataScopeServer
  {
    void ping();
    string getScopeName();
    StringVec listVars();
    BasicDataServer retrieveVar(in string varName);
    StringDataServer createGlobalStringVar(in string varName);
    StringDataServer createGlobalTmpVar(in ByteVec newValue);
    void shutdownIfNotHostedByDSM();
  };

  interface DataServerManager
  {
    StringVec listScopes();
    StringVec listAliveAndKickingScopes();
    DataScopeServer getDefaultScope();
    boolean isAliveAndKicking(in string scopeName);
    DataScopeServer createDataScope(in string scopeName);
    DataScopeServer retriveDataScope(in string scopeName);
    DataScopeServer giveADataScopeCalled(in string scopeName);
    void removeDataScope(in string scopeName);
    void cleanScopesInNS();
    void shutdownScopes();
  };
};
